CCS PCM C Compiler, Version 5.025, 54977               01-abr.-23 20:10

               Filename:   C:\Users\aviel\OneDrive\Documentos\PIC\Contador binario\contador binario.lst

               ROM used:   195 words (10%)
                           Largest free fragment is 1853
               RAM used:   6 (3%) at main() level
                           7 (3%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0A8
0003:  NOP
.................... #include <contador binario.h> 
.................... #include <16F628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
....................  
.................... #list 
....................  
....................  
.................... #FUSES NOWDT      // Es un fuse que resetea el pic si este se cuelga. 
.................... #FUSES NOPROTECT  // Permite o bloque lectura del pic con un  programador 
.................... #FUSES NOLVP      // Anula pin de programacion RB4 y lo deja como I/O 
.................... #FUSES NOMCLR     // NOMCLR = PIN RA5 Input. MCLR=PIN RA5 como reset    
....................  
.................... #FUSES INTRC_IO            // HABILITA el OSCILADOR INTERNO  
.................... #USE DELAY(clock = 4000000, INTERNAL) // COMPLEMENTA EL FUSE INTRC_IO 
*
0093:  MOVLW  22
0094:  MOVWF  04
0095:  BCF    03.7
0096:  MOVF   00,W
0097:  BTFSC  03.2
0098:  GOTO   0A7
0099:  MOVLW  01
009A:  MOVWF  78
009B:  CLRF   77
009C:  DECFSZ 77,F
009D:  GOTO   09C
009E:  DECFSZ 78,F
009F:  GOTO   09B
00A0:  MOVLW  4A
00A1:  MOVWF  77
00A2:  DECFSZ 77,F
00A3:  GOTO   0A2
00A4:  GOTO   0A5
00A5:  DECFSZ 00,F
00A6:  GOTO   099
00A7:  GOTO   0BF (RETURN)
....................  
.................... #byte TRISB = 0x86 
.................... #byte PORTB = 0x06 
....................  
....................  
.................... void initPins(){ 
....................    bit_set(TRISB, 0); 
*
0004:  BSF    03.5
0005:  BSF    06.0
....................    bit_clear(TRISB, 1); 
0006:  BCF    06.1
....................    bit_clear(TRISB, 2); 
0007:  BCF    06.2
....................    bit_clear(TRISB, 3); 
0008:  BCF    06.3
....................    bit_clear(TRISB, 4); 
0009:  BCF    06.4
....................     
....................    bit_clear(PORTB, 1); 
000A:  BCF    03.5
000B:  BCF    06.1
....................    bit_clear(PORTB, 2); 
000C:  BCF    06.2
....................    bit_clear(PORTB, 3); 
000D:  BCF    06.3
....................    bit_clear(PORTB, 4); 
000E:  BCF    06.4
000F:  GOTO   0B2 (RETURN)
.................... } 
....................  
.................... void contador(int i) { 
....................     switch (i) { 
0010:  MOVF   22,W
0011:  XORLW  00
0012:  BTFSC  03.2
0013:  GOTO   042
0014:  XORLW  01
0015:  BTFSC  03.2
0016:  GOTO   047
0017:  XORLW  03
0018:  BTFSC  03.2
0019:  GOTO   04C
001A:  XORLW  01
001B:  BTFSC  03.2
001C:  GOTO   051
001D:  XORLW  07
001E:  BTFSC  03.2
001F:  GOTO   056
0020:  XORLW  01
0021:  BTFSC  03.2
0022:  GOTO   05B
0023:  XORLW  03
0024:  BTFSC  03.2
0025:  GOTO   060
0026:  XORLW  01
0027:  BTFSC  03.2
0028:  GOTO   065
0029:  XORLW  0F
002A:  BTFSC  03.2
002B:  GOTO   06A
002C:  XORLW  01
002D:  BTFSC  03.2
002E:  GOTO   06F
002F:  XORLW  03
0030:  BTFSC  03.2
0031:  GOTO   074
0032:  XORLW  01
0033:  BTFSC  03.2
0034:  GOTO   079
0035:  XORLW  07
0036:  BTFSC  03.2
0037:  GOTO   07E
0038:  XORLW  01
0039:  BTFSC  03.2
003A:  GOTO   083
003B:  XORLW  03
003C:  BTFSC  03.2
003D:  GOTO   088
003E:  XORLW  01
003F:  BTFSC  03.2
0040:  GOTO   08D
0041:  GOTO   092
....................     case 0: 
....................         bit_clear(PORTB, 1); 
0042:  BCF    06.1
....................         bit_clear(PORTB, 2); 
0043:  BCF    06.2
....................         bit_clear(PORTB, 3); 
0044:  BCF    06.3
....................         bit_clear(PORTB, 4); 
0045:  BCF    06.4
....................         break; 
0046:  GOTO   092
....................  
....................     case 1: 
....................         bit_set(PORTB, 1); 
0047:  BSF    06.1
....................         bit_clear(PORTB, 2); 
0048:  BCF    06.2
....................         bit_clear(PORTB, 3); 
0049:  BCF    06.3
....................         bit_clear(PORTB, 4); 
004A:  BCF    06.4
....................         break; 
004B:  GOTO   092
....................  
....................     case 2: 
....................         bit_clear(PORTB, 1); 
004C:  BCF    06.1
....................         bit_set(PORTB, 2); 
004D:  BSF    06.2
....................         bit_clear(PORTB, 3); 
004E:  BCF    06.3
....................         bit_clear(PORTB, 4); 
004F:  BCF    06.4
....................         break; 
0050:  GOTO   092
....................  
....................     case 3: 
....................         bit_set(PORTB, 1); 
0051:  BSF    06.1
....................         bit_set(PORTB, 2); 
0052:  BSF    06.2
....................         bit_clear(PORTB, 3); 
0053:  BCF    06.3
....................         bit_clear(PORTB, 4); 
0054:  BCF    06.4
....................         break; 
0055:  GOTO   092
....................  
....................     case 4: 
....................         bit_clear(PORTB, 1); 
0056:  BCF    06.1
....................         bit_clear(PORTB, 2); 
0057:  BCF    06.2
....................         bit_set(PORTB, 3); 
0058:  BSF    06.3
....................         bit_clear(PORTB, 4); 
0059:  BCF    06.4
....................         break; 
005A:  GOTO   092
....................  
....................     case 5: 
....................         bit_set(PORTB, 1); 
005B:  BSF    06.1
....................         bit_clear(PORTB, 2); 
005C:  BCF    06.2
....................         bit_set(PORTB, 3); 
005D:  BSF    06.3
....................         bit_clear(PORTB, 4); 
005E:  BCF    06.4
....................         break; 
005F:  GOTO   092
....................  
....................     case 6: 
....................         bit_clear(PORTB, 1); 
0060:  BCF    06.1
....................         bit_set(PORTB, 2); 
0061:  BSF    06.2
....................         bit_set(PORTB, 3); 
0062:  BSF    06.3
....................         bit_clear(PORTB, 4); 
0063:  BCF    06.4
....................         break; 
0064:  GOTO   092
....................  
....................     case 7: 
....................         bit_set(PORTB, 1); 
0065:  BSF    06.1
....................         bit_set(PORTB, 2); 
0066:  BSF    06.2
....................         bit_set(PORTB, 3); 
0067:  BSF    06.3
....................         bit_clear(PORTB, 4); 
0068:  BCF    06.4
....................         break; 
0069:  GOTO   092
....................  
....................     case 8: 
....................         bit_clear(PORTB, 1); 
006A:  BCF    06.1
....................         bit_clear(PORTB, 2); 
006B:  BCF    06.2
....................         bit_clear(PORTB, 3); 
006C:  BCF    06.3
....................         bit_set(PORTB, 4); 
006D:  BSF    06.4
....................         break; 
006E:  GOTO   092
....................  
....................     case 9: 
....................         bit_set(PORTB, 1); 
006F:  BSF    06.1
....................         bit_clear(PORTB, 2); 
0070:  BCF    06.2
....................         bit_clear(PORTB, 3); 
0071:  BCF    06.3
....................         bit_set(PORTB, 4); 
0072:  BSF    06.4
....................         break; 
0073:  GOTO   092
....................  
....................     case 10: 
....................         bit_clear(PORTB, 1); 
0074:  BCF    06.1
....................         bit_set(PORTB, 2); 
0075:  BSF    06.2
....................         bit_clear(PORTB, 3); 
0076:  BCF    06.3
....................         bit_set(PORTB, 4); 
0077:  BSF    06.4
....................         break; 
0078:  GOTO   092
....................  
....................     case 11: 
....................         bit_set(PORTB, 1); 
0079:  BSF    06.1
....................         bit_set(PORTB, 2); 
007A:  BSF    06.2
....................         bit_clear(PORTB, 3); 
007B:  BCF    06.3
....................         bit_set(PORTB, 4); 
007C:  BSF    06.4
....................         break; 
007D:  GOTO   092
....................  
....................     case 12: 
....................         bit_clear(PORTB, 1); 
007E:  BCF    06.1
....................         bit_clear(PORTB, 2); 
007F:  BCF    06.2
....................         bit_set(PORTB, 3); 
0080:  BSF    06.3
....................         bit_set(PORTB, 4); 
0081:  BSF    06.4
....................         break; 
0082:  GOTO   092
....................  
....................     case 13: 
....................         bit_set(PORTB, 1); 
0083:  BSF    06.1
....................         bit_clear(PORTB, 2); 
0084:  BCF    06.2
....................         bit_set(PORTB, 3); 
0085:  BSF    06.3
....................         bit_set(PORTB, 4); 
0086:  BSF    06.4
....................         break; 
0087:  GOTO   092
....................  
....................     case 14: 
....................         bit_clear(PORTB, 1); 
0088:  BCF    06.1
....................         bit_set(PORTB, 2); 
0089:  BSF    06.2
....................         bit_set(PORTB, 3); 
008A:  BSF    06.3
....................         bit_set(PORTB, 4); 
008B:  BSF    06.4
....................         break; 
008C:  GOTO   092
....................  
....................     case 15: 
....................         bit_set(PORTB, 1); 
008D:  BSF    06.1
....................         bit_set(PORTB, 2); 
008E:  BSF    06.2
....................         bit_set(PORTB, 3); 
008F:  BSF    06.3
....................         bit_set(PORTB, 4); 
0090:  BSF    06.4
....................         break; 
0091:  GOTO   092
....................     default: 
....................         break; 
....................     } 
0092:  GOTO   0BC (RETURN)
.................... } 
....................  
.................... void main() 
*
00A8:  MOVF   03,W
00A9:  ANDLW  1F
00AA:  MOVWF  03
00AB:  BSF    03.5
00AC:  BSF    0E.3
00AD:  MOVLW  07
00AE:  BCF    03.5
00AF:  MOVWF  1F
00B0:  BCF    03.7
.................... { 
....................    initPins(); 
00B1:  GOTO   004
....................    while(TRUE) 
....................    { 
....................       for(int i = 0; i < 16; i++){ 
00B2:  CLRF   21
00B3:  MOVF   21,W
00B4:  SUBLW  0F
00B5:  BTFSS  03.0
00B6:  GOTO   0C1
....................           if (bit_test(PORTB, 0) == 1) { 
00B7:  BTFSC  06.0
....................               i = 0; 
00B8:  CLRF   21
....................           } 
....................           contador(i); 
00B9:  MOVF   21,W
00BA:  MOVWF  22
00BB:  GOTO   010
....................          delay_ms(250); 
00BC:  MOVLW  FA
00BD:  MOVWF  22
00BE:  GOTO   093
00BF:  INCF   21,F
00C0:  GOTO   0B3
....................       } 
00C1:  GOTO   0B2
....................    } 
.................... } 
00C2:  SLEEP

Configuration Fuses:
   Word  1: 3F50   NOWDT PUT INTRC_IO NOMCLR BROWNOUT NOLVP NOCPD NOPROTECT
