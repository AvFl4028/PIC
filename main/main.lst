CCS PCM C Compiler, Version 5.025, 54977               04-abr.-23 14:33

               Filename:   C:\Users\aviel\OneDrive\Documentos\PIC\main\main.lst

               ROM used:   119 words (3%)
                           Largest free fragment is 2048
               RAM used:   7 (4%) at main() level
                           7 (4%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   03F
0003:  NOP
.................... #include <main.h> 
.................... #include <16F874A.h> 
.................... //////////// Standard Header file for the PIC16F874A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F874A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
002A:  MOVLW  25
002B:  MOVWF  04
002C:  MOVF   00,W
002D:  BTFSC  03.2
002E:  GOTO   03D
002F:  MOVLW  01
0030:  MOVWF  21
0031:  CLRF   20
0032:  DECFSZ 20,F
0033:  GOTO   032
0034:  DECFSZ 21,F
0035:  GOTO   031
0036:  MOVLW  4A
0037:  MOVWF  20
0038:  DECFSZ 20,F
0039:  GOTO   038
003A:  GOTO   03B
003B:  DECFSZ 00,F
003C:  GOTO   02F
003D:  BCF    0A.3
003E:  GOTO   066 (RETURN)
....................  
....................  
....................  
.................... #byte TRISA = 0x85 
.................... #byte PORTA = 0x05 
....................  
.................... #byte TRISB = 0x86 
.................... #byte PORTB = 0x06 
....................  
.................... int i; 
....................  
.................... void initpins(){ 
....................    bit_clear(TRISA, 0); 
*
0004:  BSF    03.5
0005:  BCF    05.0
....................    bit_clear(PORTA, 0); 
0006:  BCF    03.5
0007:  BCF    05.0
....................  
....................    bit_clear(TRISB, 0); 
0008:  BSF    03.5
0009:  BCF    06.0
....................    bit_clear(PORTB, 0); 
000A:  BCF    03.5
000B:  BCF    06.0
....................     
....................    bit_clear(TRISB, 1); 
000C:  BSF    03.5
000D:  BCF    06.1
....................    bit_clear(PORTB, 1); 
000E:  BCF    03.5
000F:  BCF    06.1
....................     
....................    bit_clear(TRISB, 2); 
0010:  BSF    03.5
0011:  BCF    06.2
....................    bit_clear(PORTB, 2); 
0012:  BCF    03.5
0013:  BCF    06.2
....................     
....................    bit_clear(TRISB, 3); 
0014:  BSF    03.5
0015:  BCF    06.3
....................    bit_clear(PORTB, 3); 
0016:  BCF    03.5
0017:  BCF    06.3
....................     
....................    bit_set(TRISB, 4); 
0018:  BSF    03.5
0019:  BSF    06.4
....................    bit_clear(PORTB, 4); 
001A:  BCF    03.5
001B:  BCF    06.4
....................     
....................    bit_set(TRISB, 5); 
001C:  BSF    03.5
001D:  BSF    06.5
....................    bit_clear(PORTB, 5); 
001E:  BCF    03.5
001F:  BCF    06.5
....................     
....................    bit_set(TRISB, 6); 
0020:  BSF    03.5
0021:  BSF    06.6
....................    bit_clear(PORTB, 6); 
0022:  BCF    03.5
0023:  BCF    06.6
....................     
....................    bit_set(TRISB, 7); 
0024:  BSF    03.5
0025:  BSF    06.7
....................    bit_clear(PORTB, 7); 
0026:  BCF    03.5
0027:  BCF    06.7
0028:  BCF    0A.3
0029:  GOTO   04B (RETURN)
.................... } 
....................  
.................... void main() 
*
003F:  MOVF   03,W
0040:  ANDLW  1F
0041:  MOVWF  03
0042:  BSF    03.5
0043:  BSF    1F.0
0044:  BSF    1F.1
0045:  BSF    1F.2
0046:  BCF    1F.3
0047:  MOVLW  07
0048:  MOVWF  1C
.................... { 
....................    initpins(); 
0049:  BCF    03.5
004A:  GOTO   004
....................    while(TRUE) 
....................    { 
....................       for(i = 0; i < 4; i++){ 
004B:  CLRF   24
004C:  MOVF   24,W
004D:  SUBLW  03
004E:  BTFSS  03.0
004F:  GOTO   075
....................          bit_set(PORTB, i); 
0050:  MOVLW  01
0051:  MOVWF  20
0052:  MOVF   24,W
0053:  MOVWF  21
0054:  BTFSC  03.2
0055:  GOTO   05A
0056:  BCF    03.0
0057:  RLF    20,F
0058:  DECFSZ 21,F
0059:  GOTO   056
005A:  MOVF   20,W
005B:  IORWF  06,F
....................          if(bit_test(PORTB, 4) == 1){ 
005C:  BTFSS  06.4
005D:  GOTO   060
....................             bit_set(PORTA, 0); 
005E:  BSF    05.0
....................          }else{ 
005F:  GOTO   061
....................          bit_clear(PORTA, 0); 
0060:  BCF    05.0
....................          } 
....................          while(bit_test(PORTB, 4) == 1){} 
0061:  BTFSC  06.4
0062:  GOTO   061
....................          delay_ms(10); 
0063:  MOVLW  0A
0064:  MOVWF  25
0065:  GOTO   02A
....................          bit_clear(PORTB, i); 
0066:  MOVLW  01
0067:  MOVWF  20
0068:  MOVF   24,W
0069:  MOVWF  21
006A:  BTFSC  03.2
006B:  GOTO   070
006C:  BCF    03.0
006D:  RLF    20,F
006E:  DECFSZ 21,F
006F:  GOTO   06C
0070:  MOVF   20,W
0071:  XORLW  FF
0072:  ANDWF  06,F
0073:  INCF   24,F
0074:  GOTO   04C
....................       } 
0075:  GOTO   04B
....................    } 
....................  
.................... } 
0076:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
