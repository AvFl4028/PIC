CCS PCM C Compiler, Version 5.025, 54977               02-abr.-23 16:08

               Filename:   C:\Users\aviel\OneDrive\Documentos\PIC\display-7\display-7.lst

               ROM used:   183 words (9%)
                           Largest free fragment is 1865
               RAM used:   7 (3%) at main() level
                           7 (3%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   09C
0003:  NOP
.................... #include <display-7.h> 
.................... #include <16F628A.h> 
.................... //////////// Standard Header file for the PIC16F628A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F628A 
....................  
.................... #list 
....................  
....................  
.................... #FUSES NOWDT      // Es un fuse que resetea el pic si este se cuelga. 
.................... #FUSES NOPROTECT  // Permite o bloque lectura del pic con un  programador 
.................... #FUSES NOLVP      // Anula pin de programacion RB4 y lo deja como I/O 
.................... #FUSES NOMCLR     // NOMCLR = PIN RA5 Input. MCLR=PIN RA5 como reset    
....................  
.................... #FUSES INTRC_IO            // HABILITA el OSCILADOR INTERNO  
.................... #USE DELAY(clock = 4000000, INTERNAL) // COMPLEMENTA EL FUSE INTRC_IO 
*
0087:  MOVLW  21
0088:  MOVWF  04
0089:  BCF    03.7
008A:  MOVF   00,W
008B:  BTFSC  03.2
008C:  GOTO   09B
008D:  MOVLW  01
008E:  MOVWF  78
008F:  CLRF   77
0090:  DECFSZ 77,F
0091:  GOTO   090
0092:  DECFSZ 78,F
0093:  GOTO   08F
0094:  MOVLW  4A
0095:  MOVWF  77
0096:  DECFSZ 77,F
0097:  GOTO   096
0098:  GOTO   099
0099:  DECFSZ 00,F
009A:  GOTO   08D
009B:  GOTO   0B5 (RETURN)
....................  
.................... #byte TRISB = 0x86 
.................... #byte PORTB = 0x06 
....................  
....................  
.................... #define RESET PORTB, 0 
.................... #define LED1 PORTB, 1 
.................... #define LED2 PORTB, 2 
.................... #define LED3 PORTB, 3 
.................... #define LED4 PORTB, 4 
.................... #define LED5 PORTB, 5 
.................... #define LED6 PORTB, 6 
.................... #define LED7 PORTB, 7 
....................  
.................... int i; 
....................  
.................... void initPins() { 
....................     bit_set(TRISB, 0); 
*
0004:  BSF    03.5
0005:  BSF    06.0
....................     bit_clear(TRISB, 1); 
0006:  BCF    06.1
....................     bit_clear(TRISB, 2); 
0007:  BCF    06.2
....................     bit_clear(TRISB, 3); 
0008:  BCF    06.3
....................     bit_clear(TRISB, 4); 
0009:  BCF    06.4
....................     bit_clear(TRISB, 5); 
000A:  BCF    06.5
....................     bit_clear(TRISB, 6); 
000B:  BCF    06.6
....................     bit_clear(TRISB, 7); 
000C:  BCF    06.7
....................  
....................     bit_clear(LED1); 
000D:  BCF    03.5
000E:  BCF    06.1
....................     bit_clear(LED2); 
000F:  BCF    06.2
....................     bit_clear(LED3); 
0010:  BCF    06.3
....................     bit_clear(LED4); 
0011:  BCF    06.4
....................     bit_clear(LED5); 
0012:  BCF    06.5
....................     bit_clear(LED6); 
0013:  BCF    06.6
....................     bit_clear(LED7); 
0014:  BCF    06.7
0015:  GOTO   0A6 (RETURN)
.................... } 
....................  
.................... void cero() { 
....................    bit_set(LED1);      //a 
*
0036:  BSF    06.1
....................    bit_set(LED2);      //b 
0037:  BSF    06.2
....................    bit_set(LED3);      //c 
0038:  BSF    06.3
....................    bit_set(LED4);      //d 
0039:  BSF    06.4
....................    bit_set(LED5);      //e 
003A:  BSF    06.5
....................    bit_set(LED6);      //f 
003B:  BSF    06.6
....................    bit_clear(LED7);   //g 
003C:  BCF    06.7
.................... } 
....................  
.................... void uno() { 
....................    bit_clear(LED1);   //a 
*
003E:  BCF    06.1
....................    bit_set(LED2);      //b 
003F:  BSF    06.2
....................    bit_set(LED3);      //c 
0040:  BSF    06.3
....................    bit_clear(LED4);   //d 
0041:  BCF    06.4
....................    bit_clear(LED5);   //e 
0042:  BCF    06.5
....................    bit_clear(LED6);   //f 
0043:  BCF    06.6
....................    bit_clear(LED7);   //g 
0044:  BCF    06.7
.................... } 
....................  
.................... void dos() { 
....................    bit_set(LED1);      //a 
*
0046:  BSF    06.1
....................    bit_set(LED2);      //b 
0047:  BSF    06.2
....................    bit_clear(LED3);   //c 
0048:  BCF    06.3
....................    bit_set(LED4);      //d 
0049:  BSF    06.4
....................    bit_set(LED5);      //e 
004A:  BSF    06.5
....................    bit_clear(LED6);   //f 
004B:  BCF    06.6
....................    bit_set(LED7);      //g 
004C:  BSF    06.7
.................... } 
....................  
.................... void tres() { 
....................    bit_set(LED1);      //a 
*
004E:  BSF    06.1
....................    bit_set(LED2);      //b 
004F:  BSF    06.2
....................    bit_set(LED3);      //c 
0050:  BSF    06.3
....................    bit_set(LED4);      //d 
0051:  BSF    06.4
....................    bit_clear(LED5);   //e 
0052:  BCF    06.5
....................    bit_clear(LED6);   //f 
0053:  BCF    06.6
....................    bit_set(LED7);      //g 
0054:  BSF    06.7
.................... } 
....................  
.................... void cuatro() { 
....................    bit_clear(LED1);   //a 
*
0056:  BCF    06.1
....................    bit_set(LED2);      //b 
0057:  BSF    06.2
....................    bit_set(LED3);      //c 
0058:  BSF    06.3
....................    bit_clear(LED4);   //d 
0059:  BCF    06.4
....................    bit_clear(LED5);   //e 
005A:  BCF    06.5
....................    bit_set(LED6);      //f 
005B:  BSF    06.6
....................    bit_set(LED7);      //g 
005C:  BSF    06.7
.................... } 
....................  
.................... void cinco() { 
....................    bit_set(LED1);      //a 
*
005E:  BSF    06.1
....................    bit_clear(LED2);   //b 
005F:  BCF    06.2
....................    bit_set(LED3);      //c 
0060:  BSF    06.3
....................    bit_set(LED4);      //d 
0061:  BSF    06.4
....................    bit_clear(LED5);   //e 
0062:  BCF    06.5
....................    bit_set(LED6);      //f 
0063:  BSF    06.6
....................    bit_set(LED7);      //g 
0064:  BSF    06.7
.................... } 
....................  
.................... void seis() { 
....................    bit_set(LED1);      //a 
*
0066:  BSF    06.1
....................    bit_clear(LED2);   //b 
0067:  BCF    06.2
....................    bit_set(LED3);      //c 
0068:  BSF    06.3
....................    bit_set(LED4);      //d 
0069:  BSF    06.4
....................    bit_set(LED5);      //e 
006A:  BSF    06.5
....................    bit_set(LED6);      //f 
006B:  BSF    06.6
....................    bit_set(LED7);      //g 
006C:  BSF    06.7
.................... } 
....................  
.................... void siete() { 
....................    bit_set(LED1);      //a 
*
006E:  BSF    06.1
....................    bit_set(LED2);      //b 
006F:  BSF    06.2
....................    bit_set(LED3);      //c 
0070:  BSF    06.3
....................    bit_clear(LED4);   //d 
0071:  BCF    06.4
....................    bit_clear(LED5);   //e 
0072:  BCF    06.5
....................    bit_clear(LED6);   //f 
0073:  BCF    06.6
....................    bit_clear(LED7);   //g 
0074:  BCF    06.7
.................... } 
....................  
.................... void ocho() { 
....................    bit_set(LED1);      //a 
*
0076:  BSF    06.1
....................    bit_set(LED2);      //b 
0077:  BSF    06.2
....................    bit_set(LED3);      //c 
0078:  BSF    06.3
....................    bit_set(LED4);      //d 
0079:  BSF    06.4
....................    bit_set(LED5);      //e 
007A:  BSF    06.5
....................    bit_set(LED6);      //f 
007B:  BSF    06.6
....................    bit_set(LED7);      //g 
007C:  BSF    06.7
.................... } 
....................  
.................... void nueve() { 
....................    bit_set(LED1);      //a 
*
007E:  BSF    06.1
....................    bit_set(LED2);      //b 
007F:  BSF    06.2
....................    bit_set(LED3);      //c 
0080:  BSF    06.3
....................    bit_clear(LED4);   //d 
0081:  BCF    06.4
....................    bit_clear(LED5);   //e 
0082:  BCF    06.5
....................    bit_set(LED6);      //f 
0083:  BSF    06.6
....................    bit_set(LED7);      //g 
0084:  BSF    06.7
.................... } 
....................  
.................... void contador(int t) { 
....................     switch (t) 
*
0016:  MOVF   21,W
0017:  XORLW  00
0018:  BTFSC  03.2
0019:  GOTO   036
001A:  XORLW  01
001B:  BTFSC  03.2
001C:  GOTO   03E
001D:  XORLW  03
001E:  BTFSC  03.2
001F:  GOTO   046
0020:  XORLW  01
0021:  BTFSC  03.2
0022:  GOTO   04E
0023:  XORLW  07
0024:  BTFSC  03.2
0025:  GOTO   056
0026:  XORLW  01
0027:  BTFSC  03.2
0028:  GOTO   05E
0029:  XORLW  03
002A:  BTFSC  03.2
002B:  GOTO   066
002C:  XORLW  01
002D:  BTFSC  03.2
002E:  GOTO   06E
002F:  XORLW  0F
0030:  BTFSC  03.2
0031:  GOTO   076
0032:  XORLW  01
0033:  BTFSC  03.2
0034:  GOTO   07E
0035:  GOTO   086
....................     { 
....................     case 0: 
....................         cero(); 
....................         break; 
*
003D:  GOTO   086
....................     case 1: 
....................         uno(); 
....................         break; 
*
0045:  GOTO   086
....................     case 2: 
....................         dos(); 
....................         break; 
*
004D:  GOTO   086
....................     case 3: 
....................         tres(); 
....................         break; 
*
0055:  GOTO   086
....................     case 4: 
....................         cuatro(); 
....................         break; 
*
005D:  GOTO   086
....................     case 5: 
....................         cinco(); 
....................         break; 
*
0065:  GOTO   086
....................     case 6: 
....................         seis(); 
....................         break; 
*
006D:  GOTO   086
....................     case 7: 
....................         siete(); 
....................         break; 
*
0075:  GOTO   086
....................     case 8: 
....................         ocho(); 
....................         break; 
*
007D:  GOTO   086
....................     case 9: 
....................         nueve(); 
....................         break; 
*
0085:  GOTO   086
....................     default: 
....................         break; 
....................     } 
0086:  GOTO   0B2 (RETURN)
.................... } 
....................  
.................... void main() 
*
009C:  MOVF   03,W
009D:  ANDLW  1F
009E:  MOVWF  03
009F:  BSF    03.5
00A0:  BSF    0E.3
00A1:  MOVLW  07
00A2:  BCF    03.5
00A3:  MOVWF  1F
00A4:  BCF    03.7
.................... { 
....................    initPins(); 
00A5:  GOTO   004
....................    while(TRUE) 
....................    { 
....................        if (bit_test(RESET) == 1) { 
00A6:  BTFSS  06.0
00A7:  GOTO   0B2
....................            if (i == 9) 
00A8:  MOVF   20,W
00A9:  SUBLW  09
00AA:  BTFSS  03.2
00AB:  GOTO   0AE
....................            { 
....................                i = 0; 
00AC:  CLRF   20
....................            } 
00AD:  GOTO   0AF
....................            else { 
....................                i++; 
00AE:  INCF   20,F
....................            } 
....................            contador(i); 
00AF:  MOVF   20,W
00B0:  MOVWF  21
00B1:  GOTO   016
....................        } 
....................        delay_ms(100); 
00B2:  MOVLW  64
00B3:  MOVWF  21
00B4:  GOTO   087
00B5:  GOTO   0A6
....................    } 
.................... } 
00B6:  SLEEP

Configuration Fuses:
   Word  1: 3F50   NOWDT PUT INTRC_IO NOMCLR BROWNOUT NOLVP NOCPD NOPROTECT
